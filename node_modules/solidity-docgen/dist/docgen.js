"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const handlebars = __importStar(require("./handlebars"));
const solc_1 = require("./solc");
const source_1 = require("./source");
const sitemap_1 = require("./sitemap");
const filter_1 = require("./filter");
async function docgen(options) {
    const filter = new filter_1.Filter(options.input, options.exclude);
    const solcOutput = await solc_1.compile(filter, options['solc-module'], options['solc-settings']);
    const templates = await getTemplates(options.templates);
    const readmes = await getReadmes(filter);
    const source = new source_1.Source(options.input, solcOutput, templates.contract);
    const sitemap = sitemap_1.Sitemap.generate(source, filter, readmes, options.extension, options['contract-pages']);
    for (const page of sitemap.pages) {
        const dest = path_1.default.join(options.output, page.path);
        await fs_extra_1.default.outputFile(dest, page.render(templates.prelude));
    }
}
exports.docgen = docgen;
async function getReadmes(filter) {
    const readmes = await filter.glob('README.*');
    return await Promise.all(readmes.map(async (readmePath) => ({
        path: path_1.default.relative(filter.root, readmePath),
        contents: await fs_extra_1.default.readFile(readmePath, 'utf8'),
    })));
}
async function getTemplates(directory) {
    if (directory === undefined) {
        directory = path_1.default.join(__dirname, '..');
    }
    const contract = await readTemplate(path_1.default.join(directory, 'contract.hbs'));
    const prelude = await readTemplate(path_1.default.join(directory, 'prelude.hbs'), true);
    return { contract, prelude };
}
async function readTemplate(path, allowMissing = false) {
    try {
        const template = await fs_extra_1.default.readFile(path, 'utf8');
        return handlebars.compile(template);
    }
    catch (e) {
        if (e.code === 'ENOENT' && allowMissing) {
            // default to empty template
            return () => '';
        }
        else {
            throw e;
        }
    }
}
//# sourceMappingURL=docgen.js.map